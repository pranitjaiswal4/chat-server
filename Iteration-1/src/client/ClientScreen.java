/** Pranit Jaiswal
 * (ID: pxj6023) */
package client;

import com.opencsv.CSVReader;
import java.awt.event.WindowAdapter;
import java.awt.event.WindowEvent;
import java.io.BufferedReader;
import java.io.File;
import java.io.FileWriter;
import java.io.IOException;
import java.io.InputStreamReader;
import java.io.PrintWriter;
import java.net.Socket;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JButton;
import javax.swing.JOptionPane;
import javax.swing.JTextArea;
import javax.swing.JTextField;
import model.User;
import server.ServerScreen;
import utils.CSVReaderInJava;
import utils.Constants;
import utils.Utils;

//  Class to implement Client along with Client GUI
//  Reference URL : http://www.srikanthtechnologies.com/blog/java/chatdemo.aspx
public class ClientScreen extends javax.swing.JFrame {
    
    String uname;
    PrintWriter pw;
    BufferedReader br;
    Socket client;
    
    String MESSAGE_TYPE = "Multicast";
    String UNICAST_USERNAME = "";
    String MULTICAST_USERLIST = "";
    
    public ClientScreen() {
        
    }

    /**
     * Creates new form ClientScreen
     */
    public ClientScreen(String uname) throws Exception {
        super(uname);           // set title for frame
        this.uname = uname;     // initialize client username
        
        validateAndStartClientThread(uname); // call method to validate client and start client thread       
    }
    
    // Method to validate client and start client threrad
    private void validateAndStartClientThread(String uname) {
        
        //check if user is already online
        boolean isUserOnline = checkUserOnline();
        
        if (isUserOnline) {             // if user is already online then show an error and terminate the current window
            JOptionPane.showMessageDialog(null, uname + " is already logged-in", "Error", JOptionPane.ERROR_MESSAGE);
            terminateWindow();
        } else {                        // if user is not online then create new client
            
            try {
                // create new socket for client using pre-defined servername and port number
                client = new Socket(Constants.SERVER_NAME, Constants.PORT_NUMBER);      
                
                // check if user already exists in userLog present in CSV file
                boolean isUserExist = checkUserStatus();
                if (!isUserExist) {
                    appendNewUserToCSV();   // call method to append new user in CSV file
                }
                
                // get input and output streams 
                br = new BufferedReader(new InputStreamReader(client.getInputStream()));
                pw = new PrintWriter(client.getOutputStream(), true);
                
                // send client name to server
                pw.println(uname);  

                // customize parameters of frame
                customizeFrame();
                
                // initialize all UI components of frame
                initComponents();
                
                // make the frame visible
                setVisible(true);
                
                // create and start new thread to read incoming messages from server
                new MessagesThread().start();

                // refresh the userLog to display on screen
                refreshListOfUsers();
                
            } catch (Exception e) {
                // show error dialog if server is not running and terminate the current window
                JOptionPane.showMessageDialog(null, "Server not running", "Error", JOptionPane.ERROR_MESSAGE);
                terminateWindow();
            }
            
        }
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        buttonGroup1 = new javax.swing.ButtonGroup();
        jPanel2 = new javax.swing.JPanel();
        userListScrollPane = new javax.swing.JScrollPane();
        jPanel6 = new javax.swing.JPanel();
        username_ta = new javax.swing.JTextArea();
        status_ta = new javax.swing.JTextArea();
        timestamp_ta = new javax.swing.JTextArea();
        jPanel1 = new javax.swing.JPanel();
        unicast_rb = new javax.swing.JRadioButton();
        multicast_rb = new javax.swing.JRadioButton();
        broadcast_rb = new javax.swing.JRadioButton();
        jLabel6 = new javax.swing.JLabel();
        jPanel3 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        enter_username_panel = new javax.swing.JPanel();
        enter_username_label = new javax.swing.JLabel();
        enter_username_textfield = new javax.swing.JTextField();
        multicast_note_scrollpane = new javax.swing.JScrollPane();
        multicast_note_ta = new javax.swing.JTextArea();
        input_message_panel = new javax.swing.JPanel();
        message_label = new javax.swing.JLabel();
        send_btn = new javax.swing.JButton();
        message_tf = new javax.swing.JTextField();
        jPanel5 = new javax.swing.JPanel();
        textAreaScrollPane = new javax.swing.JScrollPane();
        chat_area_ta = new javax.swing.JTextArea();
        jPanel4 = new javax.swing.JPanel();
        jLabel7 = new javax.swing.JLabel();
        logout_btn = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.DO_NOTHING_ON_CLOSE);
        setBackground(new java.awt.Color(255, 255, 255));

        userListScrollPane.setHorizontalScrollBarPolicy(javax.swing.ScrollPaneConstants.HORIZONTAL_SCROLLBAR_NEVER);

        username_ta.setEditable(false);
        username_ta.setColumns(20);
        username_ta.setFont(new java.awt.Font("Monospaced", 0, 14)); // NOI18N
        username_ta.setRows(50);
        username_ta.setFocusable(false);
        username_ta.setMargin(new java.awt.Insets(5, 10, 5, 10));

        status_ta.setEditable(false);
        status_ta.setColumns(20);
        status_ta.setFont(new java.awt.Font("Monospaced", 0, 14)); // NOI18N
        status_ta.setRows(5);
        status_ta.setFocusable(false);
        status_ta.setMargin(new java.awt.Insets(5, 10, 5, 10));

        timestamp_ta.setEditable(false);
        timestamp_ta.setColumns(20);
        timestamp_ta.setFont(new java.awt.Font("Monospaced", 0, 14)); // NOI18N
        timestamp_ta.setRows(5);
        timestamp_ta.setFocusable(false);
        timestamp_ta.setMargin(new java.awt.Insets(5, 10, 5, 10));

        javax.swing.GroupLayout jPanel6Layout = new javax.swing.GroupLayout(jPanel6);
        jPanel6.setLayout(jPanel6Layout);
        jPanel6Layout.setHorizontalGroup(
            jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel6Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(username_ta, javax.swing.GroupLayout.PREFERRED_SIZE, 118, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(status_ta, javax.swing.GroupLayout.DEFAULT_SIZE, 120, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(timestamp_ta, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );
        jPanel6Layout.setVerticalGroup(
            jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel6Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(username_ta, javax.swing.GroupLayout.DEFAULT_SIZE, 728, Short.MAX_VALUE)
                    .addComponent(status_ta)
                    .addComponent(timestamp_ta))
                .addContainerGap())
        );

        userListScrollPane.setViewportView(jPanel6);

        buttonGroup1.add(unicast_rb);
        unicast_rb.setText("Unicast");
        unicast_rb.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                unicast_rbActionPerformed(evt);
            }
        });

        buttonGroup1.add(multicast_rb);
        multicast_rb.setSelected(true);
        multicast_rb.setText("Multicast");
        multicast_rb.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                multicast_rbActionPerformed(evt);
            }
        });

        buttonGroup1.add(broadcast_rb);
        broadcast_rb.setText("Broadcast");
        broadcast_rb.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                broadcast_rbActionPerformed(evt);
            }
        });

        jLabel6.setFont(new java.awt.Font("Tahoma", 1, 13)); // NOI18N
        jLabel6.setText("Choose type :");

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addComponent(jLabel6)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(unicast_rb)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(multicast_rb)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(broadcast_rb)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(unicast_rb)
                    .addComponent(multicast_rb)
                    .addComponent(broadcast_rb)
                    .addComponent(jLabel6)))
        );

        jLabel1.setFont(new java.awt.Font("Tahoma", 1, 13)); // NOI18N
        jLabel1.setText("Username");

        jLabel2.setFont(new java.awt.Font("Tahoma", 1, 13)); // NOI18N
        jLabel2.setText("Online Status");

        jLabel4.setFont(new java.awt.Font("Tahoma", 1, 13)); // NOI18N
        jLabel4.setText("Recent Log-in");

        javax.swing.GroupLayout jPanel3Layout = new javax.swing.GroupLayout(jPanel3);
        jPanel3.setLayout(jPanel3Layout);
        jPanel3Layout.setHorizontalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addGap(26, 26, 26)
                .addComponent(jLabel1)
                .addGap(66, 66, 66)
                .addComponent(jLabel2)
                .addGap(80, 80, 80)
                .addComponent(jLabel4)
                .addGap(77, 77, 77))
        );
        jPanel3Layout.setVerticalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1)
                    .addComponent(jLabel2)
                    .addComponent(jLabel4))
                .addGap(0, 0, Short.MAX_VALUE))
        );

        enter_username_label.setText("Enter Username:");

        //multicast_note_scrollpane.setVisible(false);

        multicast_note_ta.setEditable(false);
        multicast_note_ta.setBackground(new java.awt.Color(204, 204, 204));
        multicast_note_ta.setColumns(20);
        multicast_note_ta.setFont(new java.awt.Font("Monospaced", 2, 13)); // NOI18N
        multicast_note_ta.setRows(5);
        multicast_note_ta.setText("Note: For Multicast - \nEnter usernames separated with comma (,)\n\neg. John, Emma, Maria, David");
        multicast_note_ta.setAutoscrolls(false);
        multicast_note_scrollpane.setViewportView(multicast_note_ta);

        javax.swing.GroupLayout enter_username_panelLayout = new javax.swing.GroupLayout(enter_username_panel);
        enter_username_panel.setLayout(enter_username_panelLayout);
        enter_username_panelLayout.setHorizontalGroup(
            enter_username_panelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(enter_username_panelLayout.createSequentialGroup()
                .addComponent(enter_username_label)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(enter_username_textfield))
            .addComponent(multicast_note_scrollpane)
        );
        enter_username_panelLayout.setVerticalGroup(
            enter_username_panelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(enter_username_panelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(enter_username_panelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(enter_username_label)
                    .addComponent(enter_username_textfield, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addComponent(multicast_note_scrollpane, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        message_label.setText("Message:");

        send_btn.setBackground(new java.awt.Color(0, 153, 153));
        send_btn.setForeground(new java.awt.Color(255, 255, 255));
        send_btn.setText("Send");
        send_btn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                send_btnActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout input_message_panelLayout = new javax.swing.GroupLayout(input_message_panel);
        input_message_panel.setLayout(input_message_panelLayout);
        input_message_panelLayout.setHorizontalGroup(
            input_message_panelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(input_message_panelLayout.createSequentialGroup()
                .addGap(7, 7, 7)
                .addComponent(message_label)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(message_tf, javax.swing.GroupLayout.PREFERRED_SIZE, 282, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(send_btn)
                .addContainerGap())
        );
        input_message_panelLayout.setVerticalGroup(
            input_message_panelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(input_message_panelLayout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(input_message_panelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(message_label)
                    .addComponent(message_tf, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(send_btn, javax.swing.GroupLayout.PREFERRED_SIZE, 33, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(30, 30, 30))
        );

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addComponent(input_message_panel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel2Layout.createSequentialGroup()
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(jPanel3, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(jPanel1, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(userListScrollPane, javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(enter_username_panel, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                        .addContainerGap())))
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addComponent(jPanel3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(userListScrollPane, javax.swing.GroupLayout.PREFERRED_SIZE, 370, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(enter_username_panel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(input_message_panel, javax.swing.GroupLayout.PREFERRED_SIZE, 60, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );

        chat_area_ta.setEditable(false);
        chat_area_ta.setColumns(20);
        chat_area_ta.setRows(5);
        textAreaScrollPane.setViewportView(chat_area_ta);

        jLabel7.setFont(new java.awt.Font("Tahoma", 1, 13)); // NOI18N
        jLabel7.setText("Message Log :");

        javax.swing.GroupLayout jPanel4Layout = new javax.swing.GroupLayout(jPanel4);
        jPanel4.setLayout(jPanel4Layout);
        jPanel4Layout.setHorizontalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel4Layout.createSequentialGroup()
                .addGap(20, 20, 20)
                .addComponent(jLabel7)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jPanel4Layout.setVerticalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jLabel7, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, 25, Short.MAX_VALUE)
        );

        logout_btn.setBackground(new java.awt.Color(153, 0, 0));
        logout_btn.setForeground(new java.awt.Color(255, 255, 255));
        logout_btn.setText("Logout");
        logout_btn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                logout_btnActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel5Layout = new javax.swing.GroupLayout(jPanel5);
        jPanel5.setLayout(jPanel5Layout);
        jPanel5Layout.setHorizontalGroup(
            jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel5Layout.createSequentialGroup()
                .addGap(10, 10, 10)
                .addComponent(textAreaScrollPane, javax.swing.GroupLayout.DEFAULT_SIZE, 432, Short.MAX_VALUE)
                .addContainerGap())
            .addGroup(jPanel5Layout.createSequentialGroup()
                .addComponent(jPanel4, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(logout_btn)
                .addGap(30, 30, 30))
        );
        jPanel5Layout.setVerticalGroup(
            jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel5Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jPanel4, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(logout_btn, javax.swing.GroupLayout.PREFERRED_SIZE, 31, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(textAreaScrollPane, javax.swing.GroupLayout.PREFERRED_SIZE, 671, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanel5, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jPanel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(9, 9, 9)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jPanel5, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jPanel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    // Method to call when user clicks on "send button"
    private void send_btnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_send_btnActionPerformed
        // TODO add your handling code here:
        methodToCallAfterSendClick();
    }//GEN-LAST:event_send_btnActionPerformed

    // Method to call when user clicks on "unicast radiobutton"
    private void unicast_rbActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_unicast_rbActionPerformed
        // TODO add your handling code here:
        enter_username_panel.setVisible(true);
        multicast_note_scrollpane.setVisible(false);
        MESSAGE_TYPE = "Unicast";
        //System.out.println("Pranit : RadioButtonTest : ClientScreen : clicked on unicast_rb");
    }//GEN-LAST:event_unicast_rbActionPerformed

    // Method to call when user clicks on "multicast radiobutton"
    private void multicast_rbActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_multicast_rbActionPerformed
        // TODO add your handling code here:
        enter_username_panel.setVisible(true);
        multicast_note_scrollpane.setVisible(true);
        MESSAGE_TYPE = "Multicast";
        //System.out.println("Pranit : RadioButtonTest : ClientScreen : clicked on multicast_rb");

    }//GEN-LAST:event_multicast_rbActionPerformed

    // Method to call when user clicks on "broadcast radiobutton"
    private void broadcast_rbActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_broadcast_rbActionPerformed
        // TODO add your handling code here:
        enter_username_panel.setVisible(false);
        multicast_note_scrollpane.setVisible(false);
        MESSAGE_TYPE = "Broadcast";
        //System.out.println("Pranit : RadioButtonTest : ClientScreen : clicked on broadcast_rb");

    }//GEN-LAST:event_broadcast_rbActionPerformed

    // Method to call when user clicks on "logout button"
    private void logout_btnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_logout_btnActionPerformed
        // TODO add your handling code here:
        finishMyClient();
    }//GEN-LAST:event_logout_btnActionPerformed

    
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(ClientScreen.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(ClientScreen.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(ClientScreen.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(ClientScreen.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        
        ClientScreen mClientScreen = new ClientScreen();

        // Create InputDialog take username from user
        String name = JOptionPane.showInputDialog(null, "Enter your name :", "Username (Only A-Z and a-z)", JOptionPane.PLAIN_MESSAGE);
        name = name.trim();
        
        if (name == null) {                                     // if user clicks on "cancel" button of InputDialog                   
            mClientScreen.terminateWindow();                    // terminate the window
        } else {
            if (name.isEmpty() || name.equals("")) {            // if username provided is Empty
                JOptionPane.showMessageDialog(null, "Username should not be empty", "Invalid Username", JOptionPane.ERROR_MESSAGE); // show dialog as "Invalid Username"
                mClientScreen.terminateWindow();                // terminate the window
            } else {
                if (Utils.isAlpha(name)) {                      // check whether the username provided is alphnumeric or not
                    try {
                        mClientScreen = new ClientScreen(name); // Create and display the form

                    } catch (Exception ex) {
                    }
                } else {
                    // if username contains anything else than alphabates then show dialog as "Invalid Username"
                    JOptionPane.showMessageDialog(null, "Only alphabets are allowed in username (A-Z and a-z)", "Invalid Username", JOptionPane.ERROR_MESSAGE); 
                    mClientScreen.terminateWindow();            // terminate the window
                }
            }
        }
    }
    
    // Method to finish the client if Client wants to disconnect manually
    private void finishMyClient() {
        //Edit online status of user in CSV before terminating the application
        editCSVBeforeClose();
        
        // send "close_client" message to server so that server knows about the termination
        pw.println(Constants.MESSAGE_TO_CLOSE_CLIENT);
        
        // show dialog for "Logout successful"
        JOptionPane.showMessageDialog(null, "Logout successful", "" + uname, JOptionPane.INFORMATION_MESSAGE);
        
        // terminate the window
        terminateWindow();
    }
    
    // Method to finish the client if Server is closed (if no server is running then all clients must disconnect)
    private void closeClientRequestFromServer() {
        //Edit online status of user in CSV before terminating the application
        editCSVBeforeClose();
        
        // terminate the window
        terminateWindow();
    }
    
    // Method to terminate the window
    private void terminateWindow() {
        System.exit(0);     // Terminates instance of the runningg application
    }
    
    // Method to customize the frame before making it visible
    private void customizeFrame() {
        getContentPane().setBackground(new java.awt.Color(255, 255, 255));
        setResizable(false);
        
        addWindowListener(new WindowAdapter() {
            @Override
            public void windowClosing(WindowEvent e) {
                //finishMyClient();
            }
        });
    }
    
    // Method to check if the new user alerady exist and for editing log of existing user
    private boolean checkUserStatus() {
        
        // read latest userLog available in CSV file
        CSVReaderInJava.readUsersFromCSV(Constants.CSV_FILEPATH + "\\" + Constants.CSV_FILENAME);
        
        boolean isUserExist = false;
        
        // loop to iterate all usernames present in the CSV file
        for (int i = 0; i < CSVReaderInJava.users.size(); i++) {
            
            if (CSVReaderInJava.users.get(i).getUsername().equalsIgnoreCase(uname)) {                       // if new username matches with existing username in the csv file then
                isUserExist = true;
                
                if (!CSVReaderInJava.users.get(i).getStatus().equalsIgnoreCase(Constants.STATUS.ONLINE)) {  // if user is not already online
                    
                    // get new timestamp from system
                    String timestamp = Utils.getDateAndTimeFromTimeStamp(System.currentTimeMillis(), Constants.DATE_FORMAT_FULL_DATE_TIME);
                    
                    // set this timestamp for the user in userModel
                    CSVReaderInJava.users.get(i).setTimestamp(timestamp);
                    
                    // update status to "Online" for the user in userModel
                    CSVReaderInJava.users.get(i).setStatus(Constants.STATUS.ONLINE);
                    
                    // update the CSV with the new user model
                    rewriteCSV();
                } 
                
                break;
            }

        }

        return isUserExist;
    }
    
    private boolean checkUserOnline() {
        
        // read latest userLog available in CSV file
        CSVReaderInJava.readUsersFromCSV(Constants.CSV_FILEPATH + "\\" + Constants.CSV_FILENAME);
        
        boolean isUserOnline = false;
        
        // loop to iterate all usernames present in the CSV file
        for (int i = 0; i < CSVReaderInJava.users.size(); i++) {
            
            if (CSVReaderInJava.users.get(i).getUsername().equalsIgnoreCase(uname)) {   // if new username matches with existing username in the csv file then
                
                if (CSVReaderInJava.users.get(i).getStatus().equalsIgnoreCase(Constants.STATUS.ONLINE)) {   // if user is not already online
                    isUserOnline = true;    // set isUserOnline as true
                } else {
                    isUserOnline = false;   // set isUserOnline as false
                }
                
                break;
            }

        }

        return isUserOnline;
    }
    
    // Method to append new User to CSV file
    private void appendNewUserToCSV() {
        // get System timestamp
        String timestamp = Utils.getDateAndTimeFromTimeStamp(System.currentTimeMillis(), Constants.DATE_FORMAT_FULL_DATE_TIME);
        
        // append data in csv
        Utils.appendDataToNextLineCSV(uname, timestamp, Constants.STATUS.ONLINE);
    }
    
    // Method to save all user data in CSV before closing the ative client
    private void editCSVBeforeClose() {
        
        // read latest userLog available in CSV file
        CSVReaderInJava.readUsersFromCSV(Constants.CSV_FILEPATH + "\\" + Constants.CSV_FILENAME);  
        
        // loop to iterate all usernames present in the CSV file
        for (int i = 0; i < CSVReaderInJava.users.size(); i++) {
            if (CSVReaderInJava.users.get(i).getUsername().equalsIgnoreCase(uname)) {    // if new username matches with existing username in the csv file then
                
                // Store the details of each user in a CSV file
                String timestamp = Utils.getDateAndTimeFromTimeStamp(System.currentTimeMillis(), Constants.DATE_FORMAT_FULL_DATE_TIME);
                CSVReaderInJava.users.get(i).setTimestamp(timestamp);
                CSVReaderInJava.users.get(i).setStatus(Constants.STATUS.OFFLINE);
                
                rewriteCSV();
                
                break;
            }
        }
        
    }
    
    // Method to rewrite CSV File
    private void rewriteCSV() {
        List<String[]> users = new ArrayList<String[]>();
        for (int j = 0; j < CSVReaderInJava.users.size(); j++) {
            users.add(new String[]{CSVReaderInJava.users.get(j).getUsername(), CSVReaderInJava.users.get(j).getTimestamp(), CSVReaderInJava.users.get(j).getStatus()});
        }
        Utils.writeDataAtOnce(users);
    }

    // inner class for Messages Thread
    class MessagesThread extends Thread {
        
        public void run() {
            String line;
            try {
                while (true) {
                    // read message input from server
                    line = br.readLine();
                    
                    // perform action based on the message
                    if (line.equals(Constants.MESSAGE_TO_UPDATE_USER_LIST)) {
                        refreshListOfUsers();                   // refresh userLog and display on screen
                    } else if (line.equals(Constants.MESSAGE_TO_CLOSE_ALL_CONNECTED_CLIENTS)) {
                        closeClientRequestFromServer();         // disconnect this client from server and terminate window
                    } else {
                        chat_area_ta.append(line + "\n");       // show message on chat area
                    }
                    
                } // end of while
            } catch (Exception ex) {
            }
        }
    }
    
    // Method to call after clicking on Send Button and send message
    private void methodToCallAfterSendClick() {
        CSVReaderInJava.readUsersFromCSV(Constants.CSV_FILEPATH + "\\" + Constants.CSV_FILENAME);   // read latest userLog available in CSV file
        
        String input_username = enter_username_textfield.getText().toString().trim();   // get username from the input field
        String messageToSend = message_tf.getText().toString();                         // get message from the input field
        
        if (MESSAGE_TYPE.equals("Broadcast")) {                                 // call method if message type is Broadcast
            showOfflineUserListForBroadcast(messageToSend);
            
        } else {
            if (input_username.isEmpty() || input_username.equals("")) {        // username should not be empty
                JOptionPane.showMessageDialog(null, "Username field cannot be blank", "Invalid Username", JOptionPane.ERROR_MESSAGE);
            } else {
                if (messageToSend.isEmpty() || messageToSend.equals("")) {      // message should not be empty
                    JOptionPane.showMessageDialog(null, "You cannot send blank message", "Error", JOptionPane.ERROR_MESSAGE);
                } else {
                    
                    if (MESSAGE_TYPE.equals("Unicast")) {                       // call method if message type is Unicast
                        checkConditionsForUnicast(input_username, messageToSend);
                        
                    } else if (MESSAGE_TYPE.equals("Multicast")) {              // call method if message type is Multicast
                        checkConditionsForMulticast(input_username, messageToSend);
                    }
                    
                }
            }
        }
    }
    
    // Method to check conditions for Unicast and send Unicast message
    private void checkConditionsForUnicast(String input_username, String messageToSend) {
        boolean unicast_user_found = false;
        String unicast_user_status = Constants.STATUS.OFFLINE;
        
        UNICAST_USERNAME = enter_username_textfield.getText().toString().trim();    // getUsername
        
        if (!Utils.isAlpha(UNICAST_USERNAME)) {
            JOptionPane.showMessageDialog(null, "Only alphabets are allowed in username (A-Z and a-z)", "Invalid Username", JOptionPane.ERROR_MESSAGE);
        } else {
            
            if (UNICAST_USERNAME.equalsIgnoreCase(uname)) {
                JOptionPane.showMessageDialog(null, "You cannot send message to yourself\n\nKindly change it and try again", "Error", JOptionPane.ERROR_MESSAGE);
            } else {
                for (int i = 0; i < CSVReaderInJava.users.size(); i++) {
                    
                    if (CSVReaderInJava.users.get(i).getUsername().equalsIgnoreCase(UNICAST_USERNAME)) {
                        unicast_user_found = true;
                        unicast_user_status = CSVReaderInJava.users.get(i).getStatus().trim();
                        break;
                    }
                }
                
                if (unicast_user_found) {
                    
                    if (unicast_user_status.equals(Constants.STATUS.ONLINE)) {
                        messageToSend = messageToSend + Constants.MESSAGE_SPLITTER_KEYWORD + MESSAGE_TYPE + Constants.MESSAGE_SPLITTER_KEYWORD + UNICAST_USERNAME;
                        pw.println(messageToSend);
                        message_tf.setText("");
                        
                        JOptionPane.showMessageDialog(null, "Message sent to: " + UNICAST_USERNAME, "Message sent!!!", JOptionPane.INFORMATION_MESSAGE);
                    } else {
                        JOptionPane.showMessageDialog(null, "User \"" + UNICAST_USERNAME + "\" is currently offline. Kindly try again later.", "Error", JOptionPane.ERROR_MESSAGE);
                    }
                    
                } else {
                    JOptionPane.showMessageDialog(null, "User \"" + UNICAST_USERNAME + "\" not found. Kindly try different username", "User not found", JOptionPane.ERROR_MESSAGE);
                }
            }
            
        }
        
    }
    
    // Method to check conditions for Multicast and send Multicast message
    private void checkConditionsForMulticast(String input_username, String messageToSend) {
        
        MULTICAST_USERLIST = input_username;
        
        ArrayList<String> onlineUsers = new ArrayList<String>();
        ArrayList<String> offlineUsers = new ArrayList<String>();
        ArrayList<String> validUsers = new ArrayList<String>();
        ArrayList<String> inValidUsers = new ArrayList<String>();
        
        String validUsersString = "";
        String offlineUsersString = "";
        String onlineUsersString = "";
        
        boolean isSelfNameIncluded = false;
        
        int countOnline = 0;
        
        String[] parts = input_username.split(",");
        
        for (int i = 0; i < parts.length; i++) {
            parts[i] = parts[i].trim();
        }
        
        for (int i = 0; i < parts.length; i++) {
            
            for (int j = 0; j < CSVReaderInJava.users.size(); j++) {
                if (parts[i].equalsIgnoreCase(CSVReaderInJava.users.get(j).getUsername())) {
                    validUsers.add(parts[i]);
                    
                    String user_status = CSVReaderInJava.users.get(j).getStatus().trim();
                    
                    if (user_status.equals(Constants.STATUS.ONLINE)) {
                        countOnline++;
                        onlineUsers.add(parts[i]);
                    } else {
                        offlineUsers.add(parts[i]);
                    }
                }
            }
            
        }
        
        for (int i = 0; i < validUsers.size(); i++) {
            
            String valid_username = validUsers.get(i);
            
            if (valid_username.equalsIgnoreCase(uname)) {
                isSelfNameIncluded = true;
                JOptionPane.showMessageDialog(null, "You cannot send message to yourself\n\nKindly change it and try again", "Error", JOptionPane.ERROR_MESSAGE);
                break;
            } else {
                validUsersString = validUsersString + validUsers.get(i) + ", ";
            }
        }
        
        if (!isSelfNameIncluded) {
            if (validUsers.size() == parts.length) {
                
                if (countOnline > 0) {
                    
                    for (int i = 0; i < offlineUsers.size(); i++) {
                        offlineUsersString = offlineUsersString + offlineUsers.get(i) + ", ";
                    }
                    
                    for (int i = 0; i < onlineUsers.size(); i++) {
                        onlineUsersString = onlineUsersString + onlineUsers.get(i) + ", ";
                    }
                    
                    if (offlineUsers.size() > 0) {
                        sendMulticastMessage(messageToSend);
                        JOptionPane.showMessageDialog(null, "Message is sent to Online users:\n" + onlineUsersString + "\n\nMessage is not sent to the Offline users:\n" + offlineUsersString, "Message sent!!!", JOptionPane.INFORMATION_MESSAGE);
                    } else {
                        sendMulticastMessage(messageToSend);
                        JOptionPane.showMessageDialog(null, "Message sent to all selected users:", "Message sent!!!", JOptionPane.INFORMATION_MESSAGE);
                    }
                    
                } else {
                    JOptionPane.showMessageDialog(null, "All users you selected are offline", "Message sending failed", JOptionPane.ERROR_MESSAGE);
                }
                
            } else {
                JOptionPane.showMessageDialog(null, "We have found only these users:\n" + validUsersString + "\n\n Other usernames are invalid. \nKindly correct them and try again.", "Invalid Usernames", JOptionPane.ERROR_MESSAGE);
            }
        }
        
    }
    
    // Method to show Offline Users for Multicast
    private void showOfflineUserListForMulticast(String messageToSend, String offlineUsers, String onlineUsers) {
        int count = 0;
        
        if (count == CSVReaderInJava.users.size() - 1) {
            JOptionPane.showMessageDialog(null, "All users are offline", "Message sending failed", JOptionPane.ERROR_MESSAGE);
        } else if (count > 0) {
            sendBroadcastMessage(messageToSend);
            JOptionPane.showMessageDialog(null, "Message is sent to Online users:\n" + onlineUsers + "\n\nMessage is not sent to the Offline users:\n" + offlineUsers, "Message sent!!!", JOptionPane.INFORMATION_MESSAGE);
        } else {
            sendBroadcastMessage(messageToSend);
            JOptionPane.showMessageDialog(null, "Message sent to all users:", "Message sent!!!", JOptionPane.INFORMATION_MESSAGE);
        }
    }
    
    // Method to send Multicast Message
    private void sendMulticastMessage(String messageToSend) {
        messageToSend = messageToSend + Constants.MESSAGE_SPLITTER_KEYWORD + MESSAGE_TYPE + Constants.MESSAGE_SPLITTER_KEYWORD + MULTICAST_USERLIST;
        pw.println(messageToSend);
        message_tf.setText("");
    }
    
    // Method to show Offline Users for Broadcast
    private void showOfflineUserListForBroadcast(String messageToSend) {
        String offlineUsers = "";
        String onlineUsers = "";
        int count = 0;
        
        for (int i = 0; i < CSVReaderInJava.users.size(); i++) {
            
            if (CSVReaderInJava.users.get(i).getStatus().equals(Constants.STATUS.OFFLINE)) {
                
                count++;
                offlineUsers = offlineUsers + CSVReaderInJava.users.get(i).getUsername().trim() + ", ";
                
            } else {
                if (!CSVReaderInJava.users.get(i).getUsername().equals(uname)) {
                    onlineUsers = onlineUsers + CSVReaderInJava.users.get(i).getUsername().trim() + ", ";
                }
            }
        }
        
        if (count == CSVReaderInJava.users.size() - 1) {
            JOptionPane.showMessageDialog(null, "All users are offline", "Message sending failed", JOptionPane.ERROR_MESSAGE);
        } else if (count > 0) {
            sendBroadcastMessage(messageToSend);
            JOptionPane.showMessageDialog(null, "Message is sent to Online users:\n" + onlineUsers + "\n\nMessage is not sent to the Offline users:\n" + offlineUsers, "Message sent!!!", JOptionPane.INFORMATION_MESSAGE);
        } else {
            sendBroadcastMessage(messageToSend);
            JOptionPane.showMessageDialog(null, "Message sent to all Online users:", "Message sent!!!", JOptionPane.INFORMATION_MESSAGE);
        }
    }
    
    // Method to send Broadcast Message
    private void sendBroadcastMessage(String messageToSend) {
        messageToSend = messageToSend + Constants.MESSAGE_SPLITTER_KEYWORD + MESSAGE_TYPE + Constants.MESSAGE_SPLITTER_KEYWORD + "Broadcast";
        pw.println(messageToSend);
        message_tf.setText("");
    }
    
    // Method to refreshListOfUsers
    private void refreshListOfUsers() {

        // Clear all textfields
        username_ta.setText("");
        status_ta.setText("");
        timestamp_ta.setText("");
        
        // read latest userLog available in CSV file
        CSVReaderInJava.readUsersFromCSV(Constants.CSV_FILEPATH + "\\" + Constants.CSV_FILENAME);
        
        // loop to iterate all usernames present in the CSV file
        for (int i = 0; i < CSVReaderInJava.users.size(); i++) {
            String username = CSVReaderInJava.users.get(i).getUsername();
            
            if (!username.equalsIgnoreCase(uname)) {

                username_ta.append(CSVReaderInJava.users.get(i).getUsername() + "\n\n");
                status_ta.append(CSVReaderInJava.users.get(i).getStatus() + "\n\n");
                timestamp_ta.append(CSVReaderInJava.users.get(i).getTimestamp() + "\n\n");
            }
            
        }

    }


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JRadioButton broadcast_rb;
    private javax.swing.ButtonGroup buttonGroup1;
    private javax.swing.JTextArea chat_area_ta;
    private javax.swing.JLabel enter_username_label;
    private javax.swing.JPanel enter_username_panel;
    private javax.swing.JTextField enter_username_textfield;
    private javax.swing.JPanel input_message_panel;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JPanel jPanel4;
    private javax.swing.JPanel jPanel5;
    private javax.swing.JPanel jPanel6;
    private javax.swing.JButton logout_btn;
    private javax.swing.JLabel message_label;
    private javax.swing.JTextField message_tf;
    private javax.swing.JScrollPane multicast_note_scrollpane;
    private javax.swing.JTextArea multicast_note_ta;
    private javax.swing.JRadioButton multicast_rb;
    private javax.swing.JButton send_btn;
    private javax.swing.JTextArea status_ta;
    private javax.swing.JScrollPane textAreaScrollPane;
    private javax.swing.JTextArea timestamp_ta;
    private javax.swing.JRadioButton unicast_rb;
    private javax.swing.JScrollPane userListScrollPane;
    private javax.swing.JTextArea username_ta;
    // End of variables declaration//GEN-END:variables

}
